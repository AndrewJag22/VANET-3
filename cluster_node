import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import random
import itertools
import statistics

speed = 3                                       #user input, constant throughout here
time = 2                                        #user input, constant throughout here, re-plot after every 't' seconds
number_of_nodes = 100                           #user input, constant throughout here
change = 20                                     #random number, when different clusters can be visualised and are not too far away to never interfere
speed_x = speed
speed_y = speed


class Node(object):
    """
        Node class:
        the attributes consist of   ID,                                 (Auto assigned, start with 1, auto-increment by 1)
                                    speed vector x component,           (derived from user input)
                                    speed vector y component,           (derived from user input)
                                    speed vector,                       (derived from user input)
                                    last five speed vector,             (list of last five speed vectors)
                                    time taken,                         (user input)
                                    position vector,                    (randomly assigned in range [(-250,250), (-250,250)]
                                    last five position vector,          (list of last five position vectors)
                                    direction                           (randomly assigned: 1: straight, 2 up, 3 down)
                                    last five directions                (list of last five directions)
                                    color                              (all nodes start with colour blue)
    """
    _ID = 1                                                              # class global ID
    def __init__(self,
                 ID = 0,
                 init_speed_x = speed_x,
                 init_speed_y = speed_y,
                 init_speed = np.array([speed_x, speed_y]),
                 last_five_speed = list([np.array([0.0,0.0]), np.array([0.0,0.0]), np.array([0.0,0.0]), np.array([0.0,0.0]), np.array([0.0,0.0])]),
                 time_taken = time,
                 init_position = np.array([0.0,0.0]),
                 last_five_position = list([np.array([0.0,0.0]), np.array([0.0,0.0]), np.array([0.0,0.0]), np.array([0.0,0.0]), np.array([0.0,0.0])]),
                 last_five_x_position = [0,0,0,0,0],
                 last_five_y_position=[0, 0, 0, 0, 0],
                 direction = 0,
                 last_five_direction = [0,0,0,0,0],
                 color = 'blue'
                 ):

        self.ID = self._ID; self.__class__._ID += 1

        self.init_speed_x = init_speed_x
        self.init_speed_y = init_speed_y
        self.init_speed = init_speed
        self.last_five_speed = list([self.init_speed, np.array([0.0, 0.0]), np.array([0.0, 0.0]), np.array([0.0, 0.0]),
                              np.array([0.0, 0.0])])

        self.time_taken = time_taken

        init_x = random.randint(-250, 250)
        init_y = random.randint(-250, 250)
        init_position = np.array([init_x, init_y])
        self.init_position = init_position
        self.last_five_x_position = [0, 0, 0, 0, 0]
        self.last_five_y_position = [0, 0, 0, 0, 0]
        self.last_five_position = list([self.init_position, np.array([0.0, 0.0]), np.array([0.0, 0.0]), np.array([0.0, 0.0]),
                              np.array([0.0, 0.0])]),

        direction = random.randint(1,4)
        self.direction = direction
        self.last_five_direction = [self.direction,0,0,0,0]

        self.color = str('blue')

    def update_speed(self, init_speed):
        if self.direction == 1:
            self.init_speed_x = speed
            self.init_speed_y = 0
        if self.direction == 2:
            self.init_speed_x = 0
            self.init_speed_y = speed
        if self.direction == 3:
            self.init_speed_x = 0
            self.init_speed_y = (-1)*speed
        if self.direction == 4:
            self.init_speed_x = (-1)*speed
            self.init_speed_y = 0
        self.init_speed = np.array([self.init_speed_x, self.init_speed_y])
        self.last_five_speed.append(self.init_speed)
        self.last_five_speed.pop(0)

    def update_position(self, init_position):
        self.init_position = self.init_position + self.init_speed*self.time_taken
        self.last_five_position = list(self.last_five_position)
        self.last_five_position.append(self.init_position)
        self.last_five_x_position.append(self.init_position[0])
        self.last_five_y_position.append(self.init_position[1])
        self.last_five_position.pop(0)
        self.last_five_x_position.pop(0)
        self.last_five_y_position.pop()

    def update_colors(self, init_position):
        x = self.init_position[0]
        y = self.init_position[1]
        self_x_mean = statistics.mean(self.last_five_x_position)
        self_y_mean = statistics.mean(self.last_five_y_position)
        if self_x_mean >= mean_x and self_y_mean >= mean_y:
            self.color = 'y'
            list_of_clusters[0].append(node_list[i].ID)

        if self_x_mean >= mean_x and self_y_mean < mean_y:
            self.color = 'g'
            list_of_clusters[1].append(node_list[i].ID)

        if self_x_mean < mean_x and self_y_mean >= mean_y:
            self.color = 'm'
            list_of_clusters[2].append(node_list[i].ID)

        if self_x_mean < mean_x and self_y_mean < mean_y:
            self.color = 'r'
            list_of_clusters[3].append(node_list[i].ID)





"""
    Following function plots the scatter plot for all the nodes 
    function arg: list of nodes with every node having the parameters from the class Node
    re-plots every 5 ms (0.005 s)
    Function to be called after updating speed and position (function in class)  
"""
def plot_positions(list_of_node_parameters):
    for node in range(len(list_of_node_parameters)):
        plt.xlim(-600,600)
        plt.ylim(-600,600)
        x = list_of_node_parameters[node].init_position[0]
        y = list_of_node_parameters[node].init_position[1]
        color = list_of_node_parameters[node].color
        plt.scatter(x, y, c=color)
    plt.pause(0.005)




node_list = []                                                     # array that contains every node with its parameters

for node in range(number_of_nodes):
    node_ = Node()
    node_list.append(node_)

for j in range(change):                                              # for as many times as we want to update, 13 here
    for i in range(number_of_nodes):                                 # for every node
        node_list[i].update_speed(node_list[i].init_speed)           # update speed
        node_list[i].update_position(node_list[i].init_position)     # update position
    plot_positions(node_list)                                        # call the plot function that replots every 5 ms
    plt.cla()


#################
# clusters are now formed #
############

"""
    Maintain a list of last 5 positions, directions, speed.
    Directions now change randomly
"""

x_pos_list = []
y_pos_list = []

for i in range(number_of_nodes):
    x_pos = node_list[i].init_position[0]
    x_pos_list.append(x_pos)
    y_pos = node_list[i].init_position[1]
    y_pos_list.append(y_pos)



def average_fn(z_list):
    z_mean = statistics.mean(z_list)
    return z_mean



"""
    create a list of clusters, every cluster is a list of node IDs in the cluster
    current clustering parameter: average position
    coloured accordingly
"""

list_of_clusters = [[],[],[],[]]


mean_x = average_fn(x_pos_list)
mean_y = average_fn(y_pos_list)
for j in range(change):                                              # for as many times as we want to update, 13 here
    for i in range(number_of_nodes):                                 # for every node
        node_list[i].update_colors(node_list[i].init_position)           # update speed
    plot_positions(node_list)                                        # call the plot function that replots every 5 ms
    plt.cla()


def change_directions(node):
    new_direction = random.randint(1,4)
    node_list[i].direction = new_direction
    return node_list[i]
x_pos_list = []
y_pos_list = []

"""
    once the clusters are formed, nodes randomly change directions and based on the average position,
    clusters are reassigned/maintained
    
"""
for j in range(10*change):
    for i in range(number_of_nodes):
        x_pos = node_list[i].init_position[0]
        x_pos_list.append(x_pos)
        y_pos = node_list[i].init_position[1]
        y_pos_list.append(y_pos)
        node = node_list[i]
        change_directions(node)

        node_list[i].update_speed(node_list[i].init_speed)
        node_list[i].update_position(node_list[i].init_position)
        node_list[i].update_colors(node_list[i].init_position)
        x_pos = node_list[i].init_position[0]
        x_pos_list.append(x_pos)
        y_pos = node_list[i].init_position[1]
        y_pos_list.append(y_pos)
    mean_x = average_fn(x_pos_list)
    mean_y = average_fn(y_pos_list)

    plot_positions(node_list)
    plt.cla()

