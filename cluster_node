import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import random
import itertools
speed = 5
time = 2
number_of_nodes = 10
speed_x = speed
speed_y = speed
class Node(object):
    """
        Node class:
        the attributes consist of   ID,                                 (Auto assigned, start wit 1, aito-increment by 1)
                                    speed vector x component,           (derieved from user input)
                                    speed vector y component,           (derieved from user input)
                                    speed vector,                       (derieved from user input)
                                    time taken,                         (user input)
                                    position vector,                    (randomly assined in range [(0,()] )
                                    direction                           (randomlyl assigned: 1: straight, 2 up, 3 down)

    """
    _ID = 1
    def __init__(self,
                 ID = 0,
                 init_speed_x = speed_x,
                 init_speed_y = speed_y,
                 init_speed = np.array([speed_x, speed_y]),
                 time_taken = time,
                 init_position = np.array([0.0,0.0]),
                 direction = 0
                 ):

        self.ID = self._ID; self.__class__._ID += 1

        self.init_speed_x = init_speed_x
        self.init_speed_y = init_speed_y
        self.init_speed = init_speed

        self.time_taken = time_taken

        init_x = random.randint(-250, 250)
        init_y = random.randint(-250, 250)
        init_position = np.array([init_x, init_y])
        self.init_position = init_position

        direction = random.randint(1,3)
        self.direction = direction

    def update_speed(self, init_speed):
        if self.direction == 1:
            self.init_speed_x = self.init_speed_x
            self.init_speed_y = 0
        if self.direction == 2:
            self.init_speed_x = 0
            self.init_speed_y = self.init_speed_y
        if self.direction == 3:
            self.init_speed_x = 0
            self.init_speed_y = (-1)*self.init_speed_y
        self.init_speed = np.array([self.init_speed_x, self.init_speed_y])

    def update_position(self, init_position):
        self.init_position = self.init_position + self.init_speed*self.time_taken


def plot_positions(list_of_node_parameters):
    for node in range(len(list_of_node_parameters)):
        x = list_of_node_parameters[node].init_position[0]
        y = list_of_node_parameters[node].init_position[1]
        plt.scatter(x, y)
    plt.pause(0.005)

node_list = []
for node in range(number_of_nodes):
    node_ = Node()
    node_list.append(node_)

plot_positions(node_list)
plt.cla()
for i in range(number_of_nodes):

    print(node_list[i].init_speed)
    print(node_list[i].init_position)
    print("new now")
    print(node_list[i].direction)
    node_list[i].update_speed(node_list[i].init_speed)
    node_list[i].update_position(node_list[i].init_position)
    print(node_list[i].init_speed)
    print(node_list[i].init_position)
#plot_positions(node_list)

change = 100
for j in range(change):
    for i in range(number_of_nodes):
        node_list[i].update_speed(node_list[i].init_speed)
        node_list[i].update_position(node_list[i].init_position)

    plot_positions(node_list)
    plt.cla()
